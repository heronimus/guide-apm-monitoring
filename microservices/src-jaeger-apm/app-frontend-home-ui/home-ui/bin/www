#!/usr/bin/env node

/**
 * Module dependencies.
 */
 var initTracer = require('jaeger-client').initTracer;

 // See schema https://github.com/jaegertracing/jaeger-client-node/blob/master/src/configuration.js#L37
 // Notes: Jaeger Node.js Client Library only support report jaeger.thrift using Binary protocol over UDP/
 //        TCP, usually port 6382 (different with compact protocol at 6381)

 var config = {
   serviceName: 'home-ui',
   disable: false,
   reporter: {
      properties: {
        agentHost: normalizeAPMHost(process.env.JAEGER_AGENT_HOST || 'localhost'),
        agentPort: normalizePort(process.env.JAEGER_AGENT_PORT || '6382'),
      },
    },
 };
 var options = {
   tags: {
     'home-ui.version': '0.0.1',
   },
 };
 var tracer = initTracer(config, options);

var app = require('../app');
var debug = require('debug')('home-ui:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a APM Host
 */

function normalizeAPMHost(val) {
  return val;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
